// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/05/CPU.hdl

/**
 * The Hack CPU (Central Processing unit), consisting of an ALU,
 * two registers named A and D, and a program counter named PC.
 * The CPU is designed to fetch and execute instructions written in 
 * the Hack machine language. In particular, functions as follows:
 * Executes the inputted instruction according to the Hack machine 
 * language specification. The D and A in the language specification
 * refer to CPU-resident registers, while M refers to the external
 * memory location addressed by A, i.e. to Memory[A]. The inM input 
 * holds the value of this location. If the current instruction needs 
 * to write a value to M, the value is placed in outM, the address 
 * of the target location is placed in the addressM output, and the 
 * writeM control bit is asserted. (When writeM==0, any value may 
 * appear in outM). The outM and writeM outputs are combinational: 
 * they are affected instantaneously by the execution of the current 
 * instruction. The addressM and pc outputs are clocked: although they 
 * are affected by the execution of the current instruction, they commit 
 * to their new values only in the next time step. If reset==1 then the 
 * CPU jumps to address 0 (i.e. pc is set to 0 in next time step) rather 
 * than to the address resulting from executing the current instruction. 
 */

CHIP CPU {

    IN  inM[16],         // M value input  (M = contents of RAM[A])
        instruction[16], // Instruction for execution
        reset;           // Signals whether to re-start the current
                         // program (reset==1) or continue executing
                         // the current program (reset==0).

    OUT outM[16],        // M value output
        writeM,          // Write to M? 
        addressM[15],    // Address in data memory (of M)
        pc[15];          // address of next instruction

    PARTS:
    // Put your code here:

    // Decoder:

    Wire(in=instruction[15], out=cInst);
    // 13-14 not used
    Wire(in=instruction[12], out=a1);
    Wire(in=instruction[11], out=zx);     // c1
    Wire(in=instruction[10], out=nx);     // c2
    Wire(in=instruction[9],  out=zy);     // c3
    Wire(in=instruction[8],  out=ny);     // c4
    Wire(in=instruction[7],  out=f);      // c5
    Wire(in=instruction[6],  out=no);     // c6
    Wire(in=instruction[5],  out=storeA); // d1
    Wire(in=instruction[4],  out=storeD); // d2
    Wire(in=instruction[3],  out=storeM); // d3
    Wire(in=instruction[2],  out=jLT);    // j1
    Wire(in=instruction[1],  out=jEQ);    // j2
    Wire(in=instruction[0],  out=jGT);    // j3

    Not(in=cInst, out=aInst);

    // writeM

    And(a=storeD, b=cInst, out=writeD);
    And(a=storeM, b=cInst, out=writeM);

    // A register

    Mux16(a=aluout, b=instruction, sel=aInst, out=mux1out);
    Or(a=aInst, b=storeA, out=loadA);
    ARegister(in=mux1out, load=loadA, out=Aout, out[0..14]=addressM);

    // D Register

    DRegister(in=aluout, load=writeD, out=Dout);

    Mux16(a=Aout, b=inM, sel=a1, out=am);

    ALU(x=Dout, y=am, 
        zx=zx,
        nx=nx,
        zy=zy,
        ny=ny,
        f=f,
        no=no,
        out=aluout,
        out=outM,
        zr=zr,
        ng=ng);


    Not(in=zr, out=notzr);
    Not(in=ng, out=notng);
    And(a=notzr, b=notng, out=pos);

    And(a=jLT, b=ng, out=jump1);
    And(a=jEQ, b=zr, out=jump2);
    And(a=jGT, b=pos, out=jump3);

    Or(a=jump1, b=jump2, out=jump4);
    Or(a=jump4, b=jump3, out=jump5);

    And(a=cInst, b=jump5, out=jump);

    PC(in=Aout, load=jump, inc=true, reset=reset, out[0..14]=pc);

}














